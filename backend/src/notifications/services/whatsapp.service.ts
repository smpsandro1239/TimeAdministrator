import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Twilio } from 'twilio';
import { Logger } from '../../common/logger/logger.service';

@Injectable()
export class WhatsAppService {
  private twilioClient: Twilio;
  private whatsappFrom: string;

  constructor(
    private configService: ConfigService,
    private logger: Logger,
  ) {
    this.initializeTwilio();
  }

  private initializeTwilio(): void {
    const accountSid = this.configService.get<string>('TWILIO_ACCOUNT_SID');
    const authToken = this.configService.get<string>('TWILIO_AUTH_TOKEN');
    this.whatsappFrom = this.configService.get<string>('TWILIO_WHATSAPP_FROM');

    if (accountSid && authToken) {
      this.twilioClient = new Twilio(accountSid, authToken);
    } else {
      this.logger.warn('Credenciais do Twilio n√£o configuradas', 'WhatsAppService');
    }
  }

  async sendWhatsAppMessage(to: string, message: string): Promise<void> {
    if (!this.twilioClient) {
      this.logger.warn('Twilio n√£o configurado, mensagem n√£o enviada', 'WhatsAppService');
      return;
    }

    try {
      // Formatar n√∫mero para WhatsApp (deve come√ßar com whatsapp:)
      const formattedTo = to.startsWith('whatsapp:') ? to : `whatsapp:${to}`;

      await this.twilioClient.messages.create({
        from: this.whatsappFrom,
        to: formattedTo,
        body: message,
      });

      this.logger.log(`WhatsApp enviado para: ${to}`, 'WhatsAppService');
    } catch (error) {
      this.logger.error(`Erro ao enviar WhatsApp para ${to}`, error.stack, 'WhatsAppService');
      throw error;
    }
  }

  async sendSubscriptionExpiringMessage(
    phone: string,
    clientName: string,
    daysRemaining: number,
    expirationDate: Date,
  ): Promise<void> {
    const formattedDate = expirationDate.toLocaleDateString('pt-PT');
    
    let message: string;
    if (daysRemaining === 0) {
      message = `üö® *TimeAdministrator*\n\nOl√° ${clientName}!\n\n‚ö†Ô∏è A sua subscri√ß√£o *expira hoje* (${formattedDate}).\n\nPara continuar a usufruir dos nossos servi√ßos, renove a sua subscri√ß√£o o mais breve poss√≠vel.\n\nObrigado pela sua confian√ßa! üôè`;
    } else {
      message = `‚è∞ *TimeAdministrator*\n\nOl√° ${clientName}!\n\nA sua subscri√ß√£o expira em *${daysRemaining} dias* (${formattedDate}).\n\nLembre-se de renovar para continuar a usufruir dos nossos servi√ßos.\n\nObrigado! üòä`;
    }

    await this.sendWhatsAppMessage(phone, message);
  }

  async sendSubscriptionExpiredMessage(
    phone: string,
    clientName: string,
    expirationDate: Date,
  ): Promise<void> {
    const formattedDate = expirationDate.toLocaleDateString('pt-PT');
    
    const message = `‚ùå *TimeAdministrator*\n\nOl√° ${clientName}!\n\nA sua subscri√ß√£o expirou em ${formattedDate} e a sua conta foi temporariamente desativada.\n\nPara reativar os seus servi√ßos, por favor renove a sua subscri√ß√£o.\n\nüí° *Planos dispon√≠veis:*\n‚Ä¢ Mensal - ‚Ç¨29.99\n‚Ä¢ Trimestral - ‚Ç¨79.99 (11% desconto)\n‚Ä¢ Semestral - ‚Ç¨149.99 (17% desconto)\n‚Ä¢ Anual - ‚Ç¨279.99 (22% desconto)\n\nRenove agora e continue a usufruir dos nossos servi√ßos! üöÄ`;

    await this.sendWhatsAppMessage(phone, message);
  }

  async sendPaymentConfirmationMessage(
    phone: string,
    clientName: string,
    amount: number,
    paymentMethod: string,
  ): Promise<void> {
    const message = `‚úÖ *TimeAdministrator*\n\nOl√° ${clientName}!\n\nO seu pagamento foi processado com sucesso! üéâ\n\nüí∞ *Detalhes:*\n‚Ä¢ Valor: ‚Ç¨${amount.toFixed(2)}\n‚Ä¢ M√©todo: ${paymentMethod}\n‚Ä¢ Data: ${new Date().toLocaleDateString('pt-PT')}\n\nA sua subscri√ß√£o foi renovada e est√° agora ativa.\n\nObrigado pela sua confian√ßa! üôè`;

    await this.sendWhatsAppMessage(phone, message);
  }

  async sendAdminNotificationMessage(
    phone: string,
    message: string,
  ): Promise<void> {
    const adminMessage = `üîî *TimeAdministrator - Admin*\n\n${message}\n\nüìÖ ${new Date().toLocaleString('pt-PT')}`;
    await this.sendWhatsAppMessage(phone, adminMessage);
  }

  async sendWelcomeMessage(
    phone: string,
    clientName: string,
  ): Promise<void> {
    const message = `üéâ *Bem-vindo ao TimeAdministrator!*\n\nOl√° ${clientName}!\n\nA sua conta foi criada com sucesso. Estamos muito felizes por t√™-lo connosco! üòä\n\nPode agora:\n‚Ä¢ Gerir a sua subscri√ß√£o\n‚Ä¢ Ver o hist√≥rico de pagamentos\n‚Ä¢ Atualizar os seus dados\n\nSe tiver alguma d√∫vida, n√£o hesite em contactar-nos.\n\nObrigado pela sua confian√ßa! üöÄ`;

    await this.sendWhatsAppMessage(phone, message);
  }
}